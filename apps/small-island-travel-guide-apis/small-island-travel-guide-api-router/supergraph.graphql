schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Booking
  @join__type(graph: BOOKINGS, key: "id")
{
  id: ID!
  listings: [String]!
  startDate: String
  endDate: String
}

type Host
  @join__type(graph: HOSTS, key: "id")
  @join__type(graph: LISTINGS, key: "id")
{
  id: ID!
  hostName: String! @join__field(graph: HOSTS)
  location: String! @join__field(graph: HOSTS)
  phone: String @join__field(graph: HOSTS)
  email: String! @join__field(graph: HOSTS)
  listings: [Listing]! @join__field(graph: LISTINGS)
}

scalar join__FieldSet

enum join__Graph {
  BOOKINGS @join__graph(name: "bookings", url: "https://xnzegn1gvg.execute-api.us-east-1.amazonaws.com/")
  HOSTS @join__graph(name: "hosts", url: "https://xprqnj9t88.execute-api.us-east-1.amazonaws.com/")
  LISTINGS @join__graph(name: "listings", url: "https://v2rzc9q824.execute-api.us-east-1.amazonaws.com/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Listing
  @join__type(graph: BOOKINGS, key: "id")
  @join__type(graph: LISTINGS, key: "id")
{
  id: ID!
  bookings: [Booking] @join__field(graph: BOOKINGS)
  hostId: ID! @join__field(graph: LISTINGS)
  name: String @join__field(graph: LISTINGS)
  description: String @join__field(graph: LISTINGS)
  type: ListingType @join__field(graph: LISTINGS)
  rate: Int! @join__field(graph: LISTINGS)
}

enum ListingType
  @join__type(graph: LISTINGS)
{
  SINGLEBEDBEDROOM
  ENSUTIESINGLEBEDBEDROOM
  DOUBLEBEDBEDROOM
  ENSUITEDOUBLEBEDBEDROOM
  TRIPLEBEDBEDROOM
  ENSUITETRIPLEBEDBEDROOM
  WHOLEHOUSE
}

type Query
  @join__type(graph: BOOKINGS)
  @join__type(graph: HOSTS)
  @join__type(graph: LISTINGS)
{
  bookings: [Booking!]! @join__field(graph: BOOKINGS)
  booking: Booking! @join__field(graph: BOOKINGS)
  hosts: [Host!]! @join__field(graph: HOSTS)
  host(id: ID!): Host @join__field(graph: HOSTS)
  listings: [Listing!]! @join__field(graph: LISTINGS)
  listing(id: ID!): Listing @join__field(graph: LISTINGS)
}